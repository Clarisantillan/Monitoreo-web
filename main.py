# -*- coding: utf-8 -*-
"""app

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HaoXBCPCM-ZM3_D1qtubJG97x6xCy042
"""

from flask import Flask, render_template, request
import threading
import time
import requests
import hashlib
import smtplib
from email.mime.text import MIMEText

app = Flask(__name__)

# Función para obtener el contenido HTML de una URL
def get_page_content(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.text
    else:
        return None

# Función para calcular el hash del contenido
def calculate_hash(content):
    return hashlib.md5(content.encode()).hexdigest()

# Función para comparar el hash del contenido actual con el anterior
def compare_hashes(old_hash, new_hash):
    return old_hash == new_hash

# Monitoreo AFA
def monitor_afa(from_email, to_email):
    url = "https://www.afa.com.ar/es/boletins/Comite%20Ejecutivo?s=3"
    smtp_server = "smtp.gmail.com"
    smtp_port = 587
    smtp_username = "clara.santillan.01@gmail.com"
    smtp_password = "kjxpppupshsvndgs"

    previous_hash = ""
    first_iteration = True
    change_detected = False

    while True:
        current_content = get_page_content(url)

        if current_content:
            current_hash = calculate_hash(current_content)

            if not compare_hashes(previous_hash, current_hash):
                if not first_iteration:
                    print("¡Se detectó un cambio en el contenido!")
                    subject = "Cambio en el contenido detectado"
                    message = f"Se ha detectado un cambio en el contenido de la página: {url}"
                    send_email(smtp_server, smtp_port, smtp_username, smtp_password, from_email, to_email, subject, message)
                    change_detected = True
                else:
                    first_iteration = False

                previous_hash = current_hash
            else:
                print("No se encontraron cambios.")

        if change_detected:
            change_detected = False
            time.sleep(240)
        else:
            time.sleep(60)

# Monitoreo Segundopalo
def monitor_segundopalo(from_email, to_email):
    base_url = "https://www.segundopalo.com.ar/"
    smtp_server = "smtp.gmail.com"
    smtp_port = 587
    smtp_username = "clara.santillan.01@gmail.com"
    smtp_password = "kjxpppupshsvndgs"

    urls_to_scan = [
        base_url + "primeraa",
        base_url + "primerab",
    ]

    previous_hashes = {url: "" for url in urls_to_scan}
    first_iteration = True

    while True:
        for url in urls_to_scan:
            current_content = get_page_content(url)

            if current_content:
                current_hash = calculate_hash(current_content)

                if not compare_hashes(previous_hashes[url], current_hash):
                    if not first_iteration:
                        print(f"¡Se detectó un cambio en {url}!")
                        subject = "Cambio en el contenido detectado"
                        message = f"Se ha detectado un cambio en el contenido de la página: {url}"
                        send_email(smtp_server, smtp_port, smtp_username, smtp_password, from_email, to_email, subject, message)
                    else:
                        first_iteration = False

                    previous_hashes[url] = current_hash
                else:
                    print(f"No se encontraron cambios en {url}.")

        time.sleep(240)

# Monitoreo Sabadogol
def monitor_sabadogol(from_email, to_email):
    base_url = "https://sabadogol.com.ar/"
    smtp_server = "smtp.gmail.com"
    smtp_port = 587
    smtp_username = "clara.santillan.01@gmail.com"
    smtp_password = "kjxpppupshsvndgs"

    num_links_to_scan = 15
    previous_hashes = {i: "" for i in range(1, num_links_to_scan + 1)}
    first_iteration = True

    while True:
        for i in range(1, num_links_to_scan + 1):
            current_url = f"{base_url}categoria.php?id={i}&a="
            current_content = get_page_content(current_url)

            if current_content:
                current_hash = calculate_hash(current_content)

                if not compare_hashes(previous_hashes[i], current_hash):
                    if not first_iteration:
                        print(f"¡Se detectó un cambio en {current_url}!")
                        subject = "Cambio en el contenido detectado"
                        message = f"Se ha detectado un cambio en el contenido de la página: {current_url}"
                        send_email(smtp_server, smtp_port, smtp_username, smtp_password, from_email, to_email, subject, message)
                    else:
                        first_iteration = False

                    previous_hashes[i] = current_hash
                else:
                    print(f"No se encontraron cambios en {current_url}.")

        time.sleep(300)

# Función para enviar correo electrónico
def send_email(smtp_server, smtp_port, smtp_username, smtp_password, from_email, to_email, subject, message):
    msg = MIMEText(message)
    msg["Subject"] = subject
    msg["From"] = from_email
    msg["To"] = to_email

    with smtplib.SMTP(smtp_server, smtp_port) as server:
        server.starttls()
        server.login(smtp_username, smtp_password)
        server.sendmail(from_email, to_email, msg.as_string())

@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        site = request.form["site"]
        from_email = request.form["from_email"]
        to_email = request.form["to_email"]

        if site == "afa":
            thread = threading.Thread(target=monitor_afa, args=(from_email, to_email))
            thread.start()
        elif site == "segundopalo":
            thread = threading.Thread(target=monitor_segundopalo, args=(from_email, to_email))
            thread.start()
        elif site == "sabadogol":
            thread = threading.Thread(target=monitor_sabadogol, args=(from_email, to_email))
            thread.start()

    return render_template("index.html")

if __name__ == "__main__":
    
   
import uvicorn
    uvicorn.run(app, host=
    uvicorn.run(app,

    uvicorn

   
"0.0.0.0", port=10000)
