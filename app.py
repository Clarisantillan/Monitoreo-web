# -*- coding: utf-8 -*-
"""monitor_changes

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16cwfxGbTesOye-3IYRw72EiqLMPIdnrr
"""

from flask import Flask, request, render_template
import requests
import hashlib
import time
import smtplib
from email.mime.text import MIMEText

app = Flask(__name__)

# Configuración del correo electrónico y el servidor SMTP
from_email = "clara.santillan.01@gmail.com"
to_email = "clarisantillan@icloud.com"
smtp_server = "smtp.gmail.com"
smtp_port = 587
smtp_username = "clara.santillan.01@gmail.com"
smtp_password = "kjxpppupshsvndgs"

# URLs de los sitios web
sites = {
     "afa": "https://www.afa.com.ar/es/boletins/Comite%20Ejecutivo?s=3",
     "segundopalo_primeraa": "https://www.segundopalo.com.ar/primeraa",
     "segundopalo_primerab": "https://www.segundopalo.com.ar/primerab",
     "sabadogol": "https://sabadogol.com.ar/"
}

# Funciones para obtener el contenido HTML, calcular el hash, comparar hashes, monitorear y notificar...
# Función para obtener el contenido HTML de la página
def get_page_content(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.text
    else:
        return None

# Función para calcular el hash del contenido
def calculate_hash(content):
    return hashlib.md5(content.encode()).hexdigest()

# Función para comparar el hash del contenido actual con el anterior
def compare_hashes(old_hash, new_hash):
    return old_hash == new_hash

# Función para monitorear cambios y enviar notificaciones
def monitor_and_notify(site_key, site_url):
    previous_hash = ""
    first_iteration = True
    change_detected = False
    while True:
        # Obtener el contenido actual
        current_content = get_page_content(site_url)

        if current_content:
            # Calcular el hash actual
            current_hash = calculate_hash(current_content)

            # Comparar el hash actual con el anterior
            if not compare_hashes(previous_hash, current_hash):
                print(f"¡Se detectó un cambio en el contenido de {site_key}!")
                # Actualizar el hash anterior
                previous_hash = current_hash
                change_detected = True
            else:
                print(f"No se encontraron cambios en {site_key}.")
                change_detected = False

        if change_detected and not first_iteration:
            # Crear el mensaje de correo
            subject = f"Cambio en el contenido detectado en {site_key}"
            message = f"Se ha detectado un cambio en el contenido de la página: {site_url}"
            msg = MIMEText(message)
            msg["Subject"] = subject
            msg["From"] = from_email
            msg["To"] = to_email

            # Enviar el correo electrónico
            with smtplib.SMTP(smtp_server, smtp_port) as server:
                server.starttls()
                server.login(smtp_username, smtp_password)
                server.sendmail(from_email, to_email, msg.as_string())

            change_detected = False  # Restablecer change_detected a False después de enviar el correo electrónico
        elif first_iteration:
            first_iteration = False

        # Esperar un período de tiempo antes del próximo escaneo
        time.sleep(300)  # Escanear cada 5 minutos


def scan_and_compare_multiple_links(site_url, num_links):
    previous_hashes = {i: "" for i in range(1, num_links + 1)}
    change_detected = False
    first_iteration = True

    while True:
        for i in range(1, num_links + 1):
            current_url = f"{site_url}categoria.php?id={i}&a="
            current_content = get_page_content(current_url)

            if current_content:
                current_hash = calculate_hash(current_content)

                if not compare_hashes(previous_hashes[i], current_hash):
                    print(f"¡Se detectó un cambio en {current_url}!")
                    previous_hashes[i] = current_hash
                    change_detected = True
                else:
                    print(f"No se encontraron cambios en {current_url}.")
                    change_detected = False

        if change_detected and not first_iteration:
            # Crear el mensaje de correo
            subject = "Cambio en el contenido detectado"
            message = f"Se ha detectado un cambio en el contenido de una página en el sitio web: {current_url}"
            msg = MIMEText(message)
            msg["Subject"] = subject
            msg["From"] = smtp_username
            msg["To"] = to_email

            # Enviar el correo electrónico
            with smtplib.SMTP(smtp_server, smtp_port) as server:
                server.starttls()
                server.login(smtp_username, smtp_password)
                server.sendmail(smtp_username, to_email, msg.as_string())

            change_detected = False
        elif first_iteration:
            first_iteration = False

        # Esperar un período de tiempo antes del próximo escaneo
        time.sleep(300)  # Escanear cada 5 minutos

@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        selected_site = request.form.get("site")
        if selected_site in sites:
            site_url = sites[selected_site]
            if selected_site == "sabadogol":
              num_links_to_scan = 15
              scan_and_compare_multiple_links(site_url, num_links_to_scan)
            else:
                monitor_and_notify(selected_site, site_url)
        else:
            print("Sitio no válido")

    return render_template("index.html")

if __name__ == "__main__":
    app.run()
